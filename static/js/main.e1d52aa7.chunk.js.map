{"version":3,"sources":["Repos/Repos.js","App.js","serviceWorker.js","index.js"],"names":["Repos","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","repos","getMyReposWS","e","preventDefault","_this2","navigator","onLine","axios","get","then","response","localStorage","setItem","JSON","stringify","data","setState","catch","error","console","log","parse","getItem","repo","react_default","a","createElement","key","id","className","name","description","_this3","type","onClick","refreshBtnClicked","map","renderRepos","Component","App","href","target","rel","src_Repos_Repos","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","scope","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1d52aa7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Repos.css'\nimport axios from 'axios'\n\nclass Repos extends Component {\n    // Adds a class constructor that assigns the initial state values:\n    constructor () {\n        super();\n        this.state = {\n            repos: []\n        };\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getMyReposWS()\n        \n    }\n\n    refreshBtnClicked(e) {\n        e.preventDefault(e);\n        this.getMyReposWS()\n    }\n    getMyReposWS() {\n        if (!navigator.onLine) {\n            this.setState({ repos: JSON.parse(localStorage.getItem('repos'))});\n            return\n        }  else {\n            axios.get('https://api.github.com/users/vigneshuvi/repos')\n            .then(response => {\n                // We set the repos array in the state.\n                localStorage.setItem(\"repos\", JSON.stringify(response.data));\n                this.setState({ repos: response.data });\n\n            })\n            // Catch any error here\n            .catch(error => {\n                console.log(error)\n            })\n        }\n        \n    }\n    renderRepos(repo) {\n        return (\n            <li key={repo.id} className=\"card\">\n                <div className=\"container\">\n                    <h4><b>{repo.name}</b></h4> \n                    <p>{repo.description}</p> \n                </div>\n            </li>\n        );\n    }\n\n    // The render method contains the JSX code which will be compiled to HTML.\n    render() {\n        return (\n            <div className=\"repo--section container\">\n                <h2>Repo's are</h2>\n                <button type=\"button\" onClick={(e) => this.refreshBtnClicked(e)}>Click Me!</button>\n                <ul>\n                {\n                    this.state.repos.map ( (repo) => {\n                        return this.renderRepos(repo)\n                    })\n                }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Repos;\n","import React from 'react';\nimport './App.css';\n\n\nimport Repos from './Repos/Repos'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"\">\n          <div className=\"topheader\">\n              <header className=\"container\">\n                  <nav className=\"navbar\">\n                      <div className=\"navbar-brand\">\n                          <span className=\"navbar-item\">Vignesh Kumar - Repos</span>\n                      </div>\n                      <div className=\"navbar-end\">\n                          <a className=\"navbar-item\" href=\"https://vigneshuvi.github.com\" target=\"_blank\" rel=\"noopener noreferrer\">vigneshuvi.github.com</a>\n                      </div>\n                  </nav>\n              </header>\n          </div>\n          <section className=\"results--section\">\n              <div className=\"container\">\n                  <h1>I have contributed for Open source frameworks and skeleton in my GitHub account.<br></br> iOS, Swift, Node.js GoLang and Objectice-C</h1>\n              </div>\n              <div className=\"results--section__inner\">\n                  <Repos />\n              </div>\n          </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log('Vigneshuvi. Registration successful, scope is:', registration.scope);\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      console.log(\n        response\n      );\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}